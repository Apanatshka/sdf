module ecore-to-xml
	
imports
	trans/emf/ecore-signatures
	lib/xml/xml-doc
	
overlays 
	
	XMLAttribute(name, literal) = 
		Attribute(QName(None(), name), DoubleQuoted([Literal(literal)]))
	XMLAttribute(prefix, name, literal) = 
		Attribute(QName(Some(Prefix(prefix)), name), DoubleQuoted([Literal(literal)]))
		
strategies
	
	ecore-to-xml = topdown(try(to-xml)); topdown(try(xml-escape))
		
rules
	
	to-xml:
		EPackage(properties, children) -> Document(prologue, element, epilogue)
		where 
			xMLDecl := XMLDecl(VersionDecl(Version("1.0")), Some(EncodingDecl(Encoding("UTF-8"))), None());
			prologue := Prologue(Some(xMLDecl), [], None());
	
			qName := QName(Some(Prefix("ecore")), "EPackage");
			<fetch-elem(?Name(moduleName))> properties;
			fixedAttributes := [
				XMLAttribute("xmi", "version", "2.0"),
				XMLAttribute("xmlns", "xmi", "http://www.omg.org/XMI"),
				XMLAttribute("xmlns", "xsi", "http://www.w3.org/2001/XMLSchema-instance"),
				XMLAttribute("xmlns", "ecore", "http://www.eclipse.org/emf/2002/Ecore"),
				XMLAttribute("nsURI", moduleName),
				XMLAttribute("nsPrefix", moduleName)
			];
			attributes := <conc> (fixedAttributes, properties);
			element := Element(qName, attributes, children, None()); 
					
			epilogue := Epilogue([])		
		
	to-xml:
		EClass(properties, children) ->  Element(qName, attributes, children, None())
		where
			qName := QName(None(), "eClassifiers");
			fixedAttributes := [
				XMLAttribute("xsi", "type", "ecore:EClass")
			];
			attributes := <conc> (fixedAttributes, properties)
	
	to-xml:
		EEnum(name, children) -> Element(qName, attributes, children, None())
		where
			qName := QName(None(), "eClassifiers");
			attributes := [XMLAttribute("xsi", "type", "ecore:EEnum"), XMLAttribute("name", name)]
	
	to-xml:
		EAttribute(properties) -> Element(qName, attributes, children, None())
		where
			qName := QName(None(), "eStructuralFeatures");
			fixedAttributes := [XMLAttribute("xsi", "type", "ecore:EAttribute")];
			attributes := <conc> (fixedAttributes, properties);
			children := []
	
	to-xml:
		EReference(properties) -> Element(qName, attributes, children, None())
		where
			qName := QName(None(), "eStructuralFeatures");
			fixedAttributes := [XMLAttribute("xsi", "type", "ecore:EReference")];
			attributes := <conc> (fixedAttributes, properties);
			children := []

	to-xml:
		EAnnotation(source, detailsEntries) -> Element(qName, attributes, children, None())
		where
			qName := QName(None(), "eAnnotations");
			attributes := [XMLAttribute("source", source)];
			children := detailsEntries

	to-xml:
		ENumLiteral(literal, literal-name) -> Element(qName, attributes, children, None())
		where
			qName := QName(None(), "eLiterals");
			attributes := [XMLAttribute("literal", literal), XMLAttribute("name", literal-name)];
			children := []
			
	to-xml:
		DetailsEntry(key, value) -> 	Element(qName, attributes, children, None())
		where
			qName := QName(None(), "details");
			attributes := [XMLAttribute("key", key), XMLAttribute("value", value)];
			children := []
	
	to-xml:
		EString() -> "ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"

	to-xml:
		EInt() -> "ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"

	
	// Properties:

	to-xml:	Name(name) 			-> XMLAttribute("name", name)
	to-xml: Type(type)			-> XMLAttribute("eType", type)	where not ( <is-string> type )
	to-xml: Type(type)			-> XMLAttribute("eType", type')	where type' := <conc-strings> ("#//", type)
	to-xml: Type(type)			-> XMLAttribute("eType", type)		
	to-xml: ESuperType(type)	-> XMLAttribute("eSuperTypes", <conc-strings> ("#//", type))	
	to-xml: LowerBound(value) 	-> XMLAttribute("lowerBound", <int-to-string> value)
	to-xml:	UpperBound(value) 	-> XMLAttribute("upperBound", <int-to-string> value)
	to-xml: Containment(True())	-> XMLAttribute("containment", "true")
	to-xml: Containment(False())-> XMLAttribute("containment", "false")
	to-xml: Abstract(True())	-> XMLAttribute("abstract", "true")
	to-xml: Abstract(False())	-> XMLAttribute("abstract", "false")
	to-xml: Identifier(True())	-> XMLAttribute("iD", "true")
	to-xml: Identifier(False())	-> XMLAttribute("iD", "false")
	
	xml-escape:
		x -> y
		where
			y := <string-replace(|"&", "&amp;")> <string-replace(|"\"", "&quot;")> x		
	