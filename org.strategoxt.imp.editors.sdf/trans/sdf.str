module sdf

imports
  libstratego-lib
  libstratego-sdf
  libstratego-sglr
  libstrc
  analysis
  lib/editor-common.generated

rules

  editor-analyze:
    (ast, path, project-path) -> (error'*, warning'*, [])
    with
      editor-init;
      analyze-ast;
      // We only collect-om since we don't want inner warning dupes
      error*   := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-error)>), conc)> ast;
      warning* := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-warning)>), conc)> ast;
      if <file-exists> $[[project-path]/.disable-global-analysis] then
        serror* := []
      else
        serror* := <collect-om(context-free-syntax-sort-error, conc)> ast
      end;
      if IsImportFailed then
        error'*   := error*;
        warning'* := <conc> (serror*, warning*)
      else
        error'*   := <conc> (serror*, warning*);
        warning'* := error*
      end 

  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <propose-completion <+ ![]> node
 
  editor-resolve:
    (sort(x), position, ast, path, project-path) -> target
    where
      target := <Declaration> x
 
  editor-resolve:
    (unparameterized(x), position, ast, path, project-path) -> target
    where
      target := <parse-sdf-file> <resolve-import> x

  override pp-sdf-string = fail // ensure compiler doesn't blow up

rules // Limited exisiting sort checking
    
  context-free-syntax-sort-error:
    sort(x) -> (x, $[No definition for [x]])
    where
      not(<Declaration> x)
  
  context-free-syntax-sort-error:
    parameterized-sort(_, _) -> [] // not supported
  
  context-free-syntax-sort-error:
    'sorts(_) -> [] // ignored

rules // Local checks
  
  context-free-syntax-warning:
    prod(p, s, a*) -> (target, $[Missing {cons("Label")} attribute to label the abstract syntax])
    where
      not(<occurrences(?sort(_))> p => 1; occurrences(?lit(_)) => 0);
      if !a* => attrs(a'*) then
        not(<one(term(default(appl(unquoted("cons" + "ast"), [id]))))> a'*);
        not(<one(bracket() + reject())> a'*);
        not(!s; (sort("Keyword") + sort("\"Keyword\""))); 
        target := a*
      else
        target := s
      end
   
  context-free-syntax-error:
    prod([x], s, attrs(a*)) -> (a*, $[Illegal use of {bracket} attribute])
    where
      <one(bracket())> a*
   
  context-free-syntax-warning:
    alt(x, y) -> (<id>, $[The | construct is deprecated: instead of A|B->C use A->C B->C])

  context-free-syntax-warning:
    opt(s @ seq(_, _)) -> (s, $[Extract sequence in optional to separate productions to ensure acceptable abstract syntax])
    where
      <occurrences(is-non-terminal)> s => 1
  
  /**
   * Tests if something is a non-terminal in terms of the AST produced.
   */
  is-non-terminal =
    ?sort(_) + ?opt(_) + ?iter(_) + ?iter-star(_) + ?iter-sep(_, _) + ?iter-star-sep(_, _)
  
  // Instruct users to use { X "," }*

  context-free-syntax-warning:
    [sort(x), iter-star(seq(lit(sep), [sort(x)])) | _] ->
    (<id>, $[Use {[x] [sep]}+ instead for [sep]-separated lists])

  context-free-syntax-warning:
    [iter-star(seq(sort(x), [lit(sep)])), sort(x) | _] ->
    (<id>, $[Use {[x] [sep]}+ instead for [sep]-separated lists])

  context-free-syntax-warning:
    [opt(sort(x)), iter-star(seq(lit(sep), [sort(x)])) | _] ->
    (<id>, $[Use {[x] [sep]}* instead for [sep]-separated lists])

  context-free-syntax-warning:
    [iter-star(seq(sort(x), [lit(sep)])), opt(sort(x)) | _] ->
    (<id>, $[Use {[x] [sep]}* instead for [sep]-separated lists])

  context-free-syntax-warning:
    prod(lhs @ [sort(x), opt(seq(lit(sep), [sort(xs)]))], sort(xs), _) ->
    (lhs, $[Use {[x] [sep]}+ instead for [sep]-separated lists])
       
  // Instruct users to use { X ","? }* (seen in MDSD 2010)

  context-free-syntax-warning:
    [sort(x), iter-star(seq(opt(lit(sep)), [sort(x)])) | _] ->
    (<id>, $[Use {[x] [sep]?}+ instead for [sep]?-separated lists])

  context-free-syntax-warning:
    [iter-star(seq(sort(x), [opt(lit(sep))])), sort(x) | _] ->
    (<id>, $[Use {[x] [sep]?}+ instead for [sep]?-separated lists])

  context-free-syntax-warning:
    [opt(sort(x)), iter-star(seq(opt(lit(sep)), [sort(x)])) | _] ->
    (<id>, $[Use {[x] [sep]?}* instead for [sep]?-separated lists])

  context-free-syntax-warning:
    [iter-star(seq(sort(x), [opt(lit(sep))])), opt(sort(x)) | _] ->
    (<id>, $[Use {[x] [sep]?}* instead for [sep]?-separated lists])

  context-free-syntax-warning:
    prod(lhs @ [sort(x), opt(seq(opt(lit(sep)), [sort(xs)]))], sort(xs), _) ->
    (lhs, $[Use {[x] [sep]?}+ instead for [sep]?-separated lists])

  context-free-syntax-warning:
    [_ | t*] -> <context-free-syntax-warning> t*
  
  context-free-syntax-warning:
    iter-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)") 
  
  context-free-syntax-warning:
    iter-star-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)") 

rules

  generate-pp-rules:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      filename  := <guarantee-extension(|"selection.pp")> path;
      selected' := <add-context; sdf-desugar> selected;
      result    := <ppgenerate; pp-pp-table> selected'
    <+
      fatal-err-msg(|$[Could not generate pretty printer rules for this selection.])
  
  generate-rtg:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      filename  := <guarantee-extension(|"rtg")> path;
      selected' := <debug(!2); add-context; debug(!3); sdf-desugar> selected;
      result    := <debug(!4); core-rtg2sig; debug(!5); pp-stratego-string> selected'
    <+
      fatal-err-msg(|$[Could not generate abstract syntax signatures for this selection.])
  
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    where
      filename  := <guarantee-extension(|"aterm")> path
  
  add-context =
    if not(oncetd(?context-free-syntax(_))) then
      if is-list then
        !context-free-syntax(<id>)
      else
        !context-free-syntax([<id>])
      end
      // !'module(unparameterized("Module"), [], [exports(<id>)])
    end

rules // External tools not included in the standard libraries

  ppgenerate =
    <call> ("org.strategoxt.tools.ppgenerate", [<id>])

  core-rtg2sig =
    <call> ("org.strategoxt.tools.core-rtg2sig", [<id>])

  pp-pp-table =
    <call> ("org.strategoxt.tools.pp-pp-table", [<id>])
  
  sdf-desugar =
    <call> ("org.strategoxt.tools.sdf-desugar", [<id>]) => [_, <id>]
