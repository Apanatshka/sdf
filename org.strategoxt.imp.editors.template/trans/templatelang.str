module templatelang

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  include/TemplateLang
  lib/EditorService
  lib/editor-common.generated
  analyze
  templatelang/expand
  templatelang/to-esv
  templatelang/to-sdf
  templatelang/to-str
  utils/pp-esv
  utils/pp-sdf

rules // Main editor interface (defined by editor/TemplateLang-Builders and -References.esv)

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast', [], [], [])
    with
      editor-init;
      ast' := <analyze> ast

  // Prints the abstract syntax ATerm of a selection.
  generate-aterm(s):
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <s> selected

  generate-aterm = generate-aterm(id)

  // Only the builder options are different.
  generate-desugared-aterm = generate-aterm

  // Expanded templates (input to completion template generator)
  generate-expanded =
    generate-aterm(
      collect-om(?TemplateProduction(_, _, _));
      map(expand-multi-line-template-production)
    )

  // Generate completion templates
  generate-esv =
    collect-om(?TemplateProduction(_, _, _));
    filter(template-to-completion-template)

  generate-esv-abstract =
    generate-aterm(generate-esv)

  generate-esv-concrete:
    (selected, position, ast, path, project-path) ->
      (filename,
        $[module example
          [result]])
    with
      filename := <guarantee-extension(|"generated.esv")> path;
      result   := <generate-esv;
                   // R boxes are formatted incorrectly outside an A box.
                   // Completions is the A box ...
                   !Completions("", <id>);
                   pp-descriptor-to-string> selected

  // Generate SDF
  generate-sdf =
    collect-om(?TemplateProduction(_, _, _));
    <template-sections-to-sdf> [TemplateSection(<id>)]

  generate-sdf-abstract =
    generate-aterm(generate-sdf)

  generate-sdf-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"generated.sdf")> path;
      result   := <generate-sdf;
                   !'module(unparameterized("example"), [], [exports(<id>)]);
                   pp-sdf-to-string> selected

  // Generate pretty printer (BOX-based)
  generate-box-pp-string =
    collect-om(?TemplateProduction(_, _, _));
    <template-sections-to-stratego-string> [TemplateSection(<id>)]

  generate-box-pp:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"generated.str")> path;
      result   := <generate-box-pp-string> selected
