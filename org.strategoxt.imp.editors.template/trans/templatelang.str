module templatelang

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  libstrc
  include/TemplateLang
  // include/libtemplatelang
  //editor/TemplateLang-Outliner
  lib/EditorService
  lib/editor-common.generated
  lib/runtime/analysis/-
  lib/runtime/nbl/-
  lib/runtime/task/-
  lib/runtime/index/-
  lib/runtime/tmpl/-
  lib/runtime/types/-
  lib/runtime/editor/-
	analysis/-
	generation/-
	// analyze
	// name-desugar
	// name-check
	// check
    
rules // Analysis
  
  editor-analyze = analysis-default-editor
  
  analysis-single-default-interface = 
  	analysis-single-default(desugar-templates; lift-sdf2, id, id|<language>)
  	
  analysis-multiple-default-interface = 
  	analysis-multiple-default(parse-file <+ !(), desugar-templates; lift-sdf2, id, id|<language>, <project-path>)
  
  editor-save = analysis-save-default(|<language>)
      
rules // Editor services

  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
    	definition := <analysis-resolve(|<language>, project-path, path)> node
  
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
    	proposals := <analysis-propose-completions(|<language>, project-path, path)> ast

rules // Debugging
  
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"aterm")> path

  debug-show-desugared:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <lift-sdf2> selected
      
  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path

  debug-show-index-current =
    analysis-debug-show-current-partition(|<language>)
     
  debug-show-index-all =
    analysis-debug-show-all-partitions(|<language>)

	debug-show-tasks-selection =
		analysis-debug-show-tasks-selection(|<language>)

  debug-show-tasks-partition =
    analysis-debug-show-tasks(|<language>)
  	
  debug-reanalyze = 
  	analysis-debug-reanalyze(|<language>)

rules
	
  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
  	?(filename, string);
  	if <dirname; readdir> filename then
	    with(
	      handle := <fopen> (filename, "w");
	      <fputs> (string, handle);
	      <fclose> handle;
	      <refresh-workspace-file> filename
	    )
	  end
