module analysis/names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/editor/-


imports
  include/TemplateLang
  analysis/types
  libstrc


signature
  constructors
    NablNsModule      : Namespace
    NablNsSort        : Namespace
    NablNsConstructor : Namespace
    NablNsLabel       : Namespace


signature
  constructors
    NablProp_def  : Property
    NablProp_sort : Property


rules

  nabl-custom-properties(add-properties) =
    ![NablProp_def(), NablProp_sort()]
    ; add-properties

  def-is(|task*) =
    nabl-prop-calc(|task*, [])

  def-task(|task*) =
    get-or-create-property-task(|task*, NablProp_def())

  def-is(|task*, dep*) =
    nabl-prop-calc(|task*, dep*)

  def-list(|task*) =
    nabl-prop-list(|task*, [])

  def-list(|task*, dep*) =
    nabl-prop-list(|task*, dep*)

  def-lookup(|task*) =
    nabl-prop-lookup(|NablProp_def(), task*, [])

  def-lookup(|task*, dep*) =
    nabl-prop-lookup(|NablProp_def(), task*, dep*)

  def-match(|task*, expected) =
    nabl-prop-match(
    | NablProp_def()
    , task*
    , Eq()
    , expected
    )

  def-match(|task*, relation, expected) =
    nabl-prop-match(|NablProp_def(), task*, relation, expected)

  create-def-task(|task*) =
    fail

  get-def =
    get-property(|NablProp_def())

  store-def(|partition, prop) =
    nabl-store-prop(
    | partition
    , Prop(NablProp_def(), prop, [])
    )

  create-property-task(|partition, kind):
    term -> <create-def-task(|partition)> term
    where NablProp_def() := kind

  sort-is(|task*) =
    nabl-prop-calc(|task*, [])

  sort-task(|task*) =
    get-or-create-property-task(|task*, NablProp_sort())

  sort-is(|task*, dep*) =
    nabl-prop-calc(|task*, dep*)

  sort-list(|task*) =
    nabl-prop-list(|task*, [])

  sort-list(|task*, dep*) =
    nabl-prop-list(|task*, dep*)

  sort-lookup(|task*) =
    nabl-prop-lookup(|NablProp_sort(), task*, [])

  sort-lookup(|task*, dep*) =
    nabl-prop-lookup(|NablProp_sort(), task*, dep*)

  sort-match(|task*, expected) =
    nabl-prop-match(
    | NablProp_sort()
    , task*
    , Eq()
    , expected
    )

  sort-match(|task*, relation, expected) =
    nabl-prop-match(|NablProp_sort(), task*, relation, expected)

  create-sort-task(|task*) =
    fail

  get-sort =
    get-property(|NablProp_sort())

  store-sort(|partition, prop) =
    nabl-store-prop(
    | partition
    , Prop(NablProp_sort(), prop, [])
    )

  create-property-task(|partition, kind):
    term -> <create-sort-task(|partition)> term
    where NablProp_sort() := kind


rules

  nabl-get-scope =
    ?'module(unparameterized(m), i*, s*)
    ; ![NablNsSort(), NablNsConstructor()]

  nabl-get-name :
    'module(unparameterized(m), i*, s*) -> m

  nabl-name-apply(s) =
    'module(unparameterized(s), id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?'module(unparameterized(m), i*, s*)
    ; origin-track-forced(
        'module(
          origin-track-forced(
            unparameterized(
              nabl-def(
                ?c-uri1__
              , ?s-uri1__
              | lang__
              , partition__
              , uniques__
              , uri__
              , uri__
              , NablNsModule()
              , Unique()
              , Current()
              , [NablNsSort(), NablNsConstructor()]
              , []
              )
            )
          |
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?'module(unparameterized(m), i*, s*)
    ; 'module(
        unparameterized(
          nabl-store-props(
          | partition__
          , [ Prop(
                NablProp_def()
              , 'module(unparameterized(m), i*, s*)
              , []
              )
            ]
          )
        )
      , id
      , id
      )
    ; fail

  nabl-get-name :
    'module(unparameterized(m)) -> m

  nabl-name-apply(s) =
    'module(unparameterized(s))

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?'module(unparameterized(m))
    ; origin-track-forced(
        'module(
          origin-track-forced(
            unparameterized(
              nabl-use(
              | lang__
              , partition__
              , uniques__
              , uris__
              , [ UseCandidate(
                    NablNsModule()
                  , []
                  , Current()
                  , True()
                  , []
                  )
                ]
              )
            )
          |
          )
        )
      |
      )

  nabl-import-site(|lang__, partition__, uniques__, uris__, states__) =
    ?'module(unparameterized(m))
    ; origin-track-forced(
        nabl-import(
        | lang__
        , partition__
        , uniques__
        , uris__
        , [ Wildcard(
              [ Import(lang__, NablNsSort())
              , Import(lang__, NablNsConstructor())
              ]
            , Context(
                NablNsModule()
              , m
              , []
              , Current()
              )
            , Current()
            , []
            )
          ]
        )
      |
      )

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?p@SdfProduction(s, Constr(c), rhs, attrs)
    ; (id
       ; origin-track-forced(
           SdfProduction(
             nabl-def(
               ?c-uri1__
             , ?s-uri1__
             | lang__
             , partition__
             , uniques__
             , uri__
             , uri__
             , NablNsSort()
             , NonUnique()
             , Current()
             , []
             , []
             )
           , origin-track-forced(Constr(id)|)
           , id
           , id
           )
         |
         ))
    ; (id
       ; origin-track-forced(
           SdfProduction(
             id
           , origin-track-forced(
               Constr(
                 nabl-def(
                   ?c-uri2__
                 , ?s-uri2__
                 | lang__
                 , partition__
                 , uniques__
                 , c-uri1__
                 , s-uri1__
                 , NablNsConstructor()
                 , Unique()
                 , Current()
                 , []
                 , []
                 )
               )
             |
             )
           , id
           , id
           )
         |
         ))
    ; match(child-uris__|c-uri2__)
    ; match(sibl-uris__|s-uri2__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?p@SdfProduction(s, Constr(c), rhs, attrs)
    ; (where(r3-2-1__ := <get-or-create-property-task(|partition__, Type())> rhs)
       ; id
       ; SdfProduction(
           id
         , Constr(
             nabl-store-props(
             | partition__
             , [ Prop(
                   Type()
                 , FunType(r3-2-1__, SortType(s))
                 , [r3-2-1__]
                 )
               , Prop(NablProp_sort(), s, [r3-2-1__])
               , Prop(NablProp_def(), p, [r3-2-1__])
               ]
             )
           )
         , id
         , id
         ))
    ; fail

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?p@SdfProduction(s, Inj(), rhs, attrs)
    ; (id
       ; origin-track-forced(
           SdfProduction(
             nabl-def(
               ?c-uri1__
             , ?s-uri1__
             | lang__
             , partition__
             , uniques__
             , uri__
             , uri__
             , NablNsSort()
             , NonUnique()
             , Current()
             , []
             , []
             )
           , origin-track-forced(Inj()|)
           , id
           , id
           )
         |
         ))
    ; (id
       ; origin-track-forced(
           SdfProduction(
             id
           , origin-track-forced(
               nabl-def(
                 ?c-uri2__
               , ?s-uri2__
               | lang__
               , partition__
               , uniques__
               , c-uri1__
               , s-uri1__
               , NablNsConstructor()
               , Unique()
               , Current()
               , []
               , []
               )
             |
             )
           , id
           , id
           )
         |
         ))
    ; match(child-uris__|c-uri2__)
    ; match(sibl-uris__|s-uri2__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?p@SdfProduction(s, Inj(), rhs, attrs)
    ; (where(r4-2-1__ := <get-or-create-property-task(|partition__, Type())> rhs)
       ; id
       ; SdfProduction(
           id
         , nabl-store-props(
           | partition__
           , [ Prop(
                 Type()
               , FunType(r4-2-1__, SortType(s))
               , [r4-2-1__]
               )
             , Prop(NablProp_def(), p, [r4-2-1__])
             ]
           )
         , id
         , id
         ))
    ; fail

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?p@TemplateProduction(s, Constr(c), t, attrs)
    ; (id
       ; origin-track-forced(
           TemplateProduction(
             nabl-def(
               ?c-uri1__
             , ?s-uri1__
             | lang__
             , partition__
             , uniques__
             , uri__
             , uri__
             , NablNsSort()
             , NonUnique()
             , Current()
             , []
             , []
             )
           , origin-track-forced(Constr(id)|)
           , id
           , id
           )
         |
         ))
    ; (id
       ; origin-track-forced(
           TemplateProduction(
             id
           , origin-track-forced(
               Constr(
                 nabl-def(
                   ?c-uri2__
                 , ?s-uri2__
                 | lang__
                 , partition__
                 , uniques__
                 , c-uri1__
                 , s-uri1__
                 , NablNsConstructor()
                 , Unique()
                 , Current()
                 , []
                 , []
                 )
               )
             |
             )
           , id
           , id
           )
         |
         ))
    ; match(child-uris__|c-uri2__)
    ; match(sibl-uris__|s-uri2__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?p@TemplateProduction(s, Constr(c), t, attrs)
    ; (where(r5-2-1__ := <get-or-create-property-task(|partition__, Type())> t)
       ; id
       ; TemplateProduction(
           id
         , Constr(
             nabl-store-props(
             | partition__
             , [ Prop(
                   Type()
                 , FunType(r5-2-1__, SortType(s))
                 , [r5-2-1__]
                 )
               , Prop(NablProp_sort(), s, [r5-2-1__])
               , Prop(NablProp_def(), p, [r5-2-1__])
               ]
             )
           )
         , id
         , id
         ))
    ; fail

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?p@TemplateProduction(s, Inj(), t, attrs)
    ; (id
       ; origin-track-forced(
           TemplateProduction(
             nabl-def(
               ?c-uri1__
             , ?s-uri1__
             | lang__
             , partition__
             , uniques__
             , uri__
             , uri__
             , NablNsSort()
             , NonUnique()
             , Current()
             , []
             , []
             )
           , origin-track-forced(Inj()|)
           , id
           , id
           )
         |
         ))
    ; (id
       ; origin-track-forced(
           TemplateProduction(
             id
           , origin-track-forced(
               nabl-def(
                 ?c-uri2__
               , ?s-uri2__
               | lang__
               , partition__
               , uniques__
               , c-uri1__
               , s-uri1__
               , NablNsConstructor()
               , Unique()
               , Current()
               , []
               , []
               )
             |
             )
           , id
           , id
           )
         |
         ))
    ; match(child-uris__|c-uri2__)
    ; match(sibl-uris__|s-uri2__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?p@TemplateProduction(s, Inj(), t, attrs)
    ; (where(r6-2-1__ := <get-or-create-property-task(|partition__, Type())> t)
       ; id
       ; TemplateProduction(
           id
         , nabl-store-props(
           | partition__
           , [ Prop(
                 Type()
               , FunType(r6-2-1__, SortType(s))
               , [r6-2-1__]
               )
             , Prop(NablProp_def(), p, [r6-2-1__])
             ]
           )
         , id
         , id
         ))
    ; fail

  nabl-scoping-site =
    ?Rhs(_)
    ; nabl-scope(|[NablNsLabel()])

  nabl-get-scope =
    ?Rhs(_) ; ![NablNsLabel()]

  nabl-get-name :
    Label(l) -> l

  nabl-name-apply(s) =
    Label(s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Label(l)
    ; origin-track-forced(
        Label(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsLabel()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?SortCons(s, c)
    ; origin-track-forced(
        SortCons(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsSort()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        , id
        )
      |
      )
    ; origin-track-forced(
        SortCons(
          id
        , nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsConstructor()
              , [Prop(NablProp_sort(), s, [])]
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    sort(s) -> s

  nabl-name-apply(s) =
    sort(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?sort(s)
    ; origin-track-forced(
        sort(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsSort()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )