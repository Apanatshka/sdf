module coq-semantics/main

imports
  src-gen/signatures/-
  src-gen/signatures/modules/-
  src-gen/signatures/sorts/-
  libstratego-gpp
  lib/Coq/-
  lib/Coq/pp/-
  lib/Coq/signatures/-
  lib/runtime/index/-
  lib/runtime/nabl/-
  analysis/names
  coq-semantics/skeleton
  
rules
  
  generate-coq-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"v")> path
    ; coq-file := <strip-annos; module-to-coq; debug(!"Testing: ")> ast
    with
       result := <parenthesize-Coq; prettyprintCoq-CoqFile; box2text-string(|100)> coq-file
    <+ <bottomup(try(not(is-string) ; not(is-list) ; not(prettyprintCoq-example) ; debug(!"cannot pp ")))> coq-file
    ;  result := ""
  
  generate-coq-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"coq.aterm")> path
    ; result := <strip-annos; module-to-coq> ast

rules
  
  module-to-coq:
    Module(name, imps, ast) -> <build-module(|<base-filename> name)> (sort, constr, get_sig)
    where
     	sort := <collect-all( ?TemplateProduction(<id>, _, _)
    	                    + ?TemplateProductionWithCons(SortCons(<id>, _), _, _)
    	                    ); sorts-to-coq> ast
    ; (constr, get_sig) := <collect-all(where(?TemplateProductionWithCons(_,_,_))); template-productions-to-coq> ast
    
rules // sorts
  
  sorts-to-coq:
    sort* -> S|[Inductive sorts : Set := decls.]|
  	with
  		defs* := [ D|[ID_S]|, D|[INT_S]| ]
  	; decls := <map(sort-to-coq); nub; !ListDeclBar(<id>)> sort*
  	  
  sort-to-coq:
    SortDef(n) -> ConsDecl($[[n]_S], None(), None())

rules // Template productions (i.e. constructors)
  
  template-productions-to-coq:
    template* ->
      (
      	S|[Inductive Constructors : Set := decl_constr.]|,
      	S|[Fixpoint get_sig (x: constructors) : ((list sort), sort) := match x : Set with equations_match end. ]|
      )
     where
       equations_match := <map(template-production-to-coq)> template*
     ; decl_constr     := <map(\ Eq([[ident_x]],_) -> D|[ident_x]| \); listdecl> equations_match
  
  template-production-to-coq:
    TemplateProductionWithCons(SortCons(SortDef(s),Constructor(c)),TemplateSquare(template*),_) -> eq
    where
      term_template := <collect-all(?Placeholder(Sort(<id>),_); !Ref( $[[<id>]_S] )); !List(<id>)> template*
    ; ident_return  := $[[s]_S]
    ; eq :=
      Eq(
        [[ $[[c]C] ]]
      , T|[(term_template, ident_return)]|
      )
  
rules
  
  listdecl: [] -> ListDecl([])
  listdecl: list@[_ | _] -> ListDeclBar(list)