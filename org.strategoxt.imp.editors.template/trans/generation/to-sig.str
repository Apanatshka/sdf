module to-sig

imports
  libstratego-lib
  libstrc
  include/TemplateLang
  utils/contract
  analysis/types
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  
rules
	
	module-to-sig:
		'module(unparameterized(m), i*, s*) -> Module(m', [is*, s'])
		with
			m'  := <conc-strings> (m, ".sig")
		; is* := <map(to-str-import)> i*
	  ; s'  := Signature(<filter(section-to-sig)> s*)
	    
  to-str-import:
  	imports(i*) -> Imports(<map(!Import(<to-str-module-name>))> i*)
  	
  to-str-module-name:
  	'module(unparameterized(m)) -> <conc-strings> (m, ".sig")
  	
rules
 
  section-to-sig:
  	SDFSection('sorts(s*)) -> Sorts(s'*)
  	with
  		s'* := <map(sort-to-sig)> s*
  		
  section-to-sig:
    SDFSection(lexical-syntax(p*)) -> Constructors(sig*)
    where
      sig* := <filter(lexical-to-sig); not(?[])> p*
    
  section-to-sig:
    SDFSection(context-free-syntax(p*)) -> Constructors(sig*)
    where
      sig* := <filter(cfg-to-sig); not(?[])> p*
  
  section-to-sig:
    TemplateSection(t*) -> Constructors(sig*)
    with
      sig* := <map(template-to-sig)> t*
  
  sort-to-sig:
    sort(s) -> SortNoArgs(s)
  
  lexical-to-sig:
    SdfProduction(s, _, _, attrs) -> OpDeclInj(FunType([SortType("String")], SortType(s)))
    where
      <not(attrs(fetch-elem(reject())))> attrs
    
  cfg-to-sig:
  	SdfProduction(_, c, _, attrs) -> <cons-to-decl> c
    where
    	<not(attrs(fetch-elem(reject())))> attrs
    
  template-to-sig:
    TemplateProduction(_, c, _, _) -> <cons-to-decl> c  
  		
rules 
  
  cons-to-decl =
    ?Inj() 
  < !OpDeclInj(<stype-of>)
  + !OpDecl(<id>, <stype-of>)
  
  stype-of =
    get-type; debug(!"type ")
  ; try(?FunType([], <id>))
   
  
    
  