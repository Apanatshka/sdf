module template

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/Template
  lib/editor-common.generated
  analysis
  desugar
  generate-esv
  generate-sdf
  generate-str
  generation-utils
  sdf

rules // Main editor interface (defined by editor/Template-Builders and -References.esv)

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast', error*, warning*, [])
    with
      editor-init;
      ast' := <analyze>
    with
      (sdf-error*, sdf-warning*) := <sdf-editor-analyze>;
      tmpl-error*   := <collect-om(?Templates(<collect-om(templates-error)>), conc)> ast;
      tmpl-warning* := <collect-om(?Templates(<collect-om(templates-warning)>), conc)> ast;
      error*   := [sdf-error*, tmpl-error*];
      warning* := [sdf-warning*, tmpl-warning*]

  editor-resolve:
    (x, position, ast, path, project-path) -> target
    where
      target := <Declaration> x

  editor-resolve:
    (Import(x), position, ast, path, project-path) -> target
    where
      target := <parse-template-file> <resolve-import> x

rules // Limited existing sort checking (plugs into sdf.str)

  context-free-syntax-sort-error:
    Placeholder(_, Sort(x), _, _) -> (x, $[No definition for [x]])
    where
      not(<Declaration> x)

rules // Local checks

  templates-error:
    TemplateProductionWithCons(_, _, _, attrs(attr*)) ->
      (x, $[Constructor already specified at start of production. Please remove this cons attribute.])
    where
      <collect-one(?sdf-cons(x))> attr*

  context-free-syntax-error:
    SdfProductionWithCons(_, _, _, attrs(attr*)) ->
      (x, $[Constructor already specified at start of production. Please remove this cons attribute.])
    where
      <collect-one(?sdf-cons(x))> attr*

  templates-warning:
    Template([head | tail]) ->
      (head, $[It is recommended to insert a linebreak between the start of a multiline template and its first element.])
    where
      <not(?Newline(_))> head; // doesn't start with newline
      <one(?Newline(_))> tail  // does contain a newline

rules // Code generation

  generate(s|ext):
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|ext)> path;
      result   := <s> selected

  generate-aterm(s) = generate(s|"aterm")
  generate-esv(s) = generate(s|"esv")
  generate-sdf(s) = generate(s|"def")
  generate-str(s) = generate(s|"str")

  // Prints the abstract syntax ATerm of a selection.
  generate-aterm = generate-aterm(id)

  generate-desugared-aterm = generate-aterm(desugar-top; declare-globals-top)

  generate-esv = generate-esv(to-esv)

  generate-sdf = generate-sdf(to-sdf)

  generate-str = generate-str(to-str)

  generate-all:
    (selected, position, ast, path, project-path) -> None()
    with
      let gen(generate, get-output-path | name, ext) =
        {output-ast, filename, full-path:
          <debug> $[Generating [name]...];
          output-ast := <generate> ast;
          filename := <get-output-path>; debug;
          <write-string-to-file> (filename, output-ast);
          <refresh-workspace-file> filename
        }
      in
        esv-modulename := <get-esv-output-path; base-filename; remove-extension>;
        str-modulename := <get-str-output-path; base-filename; remove-extension>;
        gen(to-esv(|esv-modulename), get-esv-output-path | "ESV", "esv");
        gen(to-sdf                 , get-sdf-output-path | "SDF", "def");
        gen(to-str(|str-modulename), get-str-output-path | "STR", "str")
      end

  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
    with(
      ?(filename, string);
      handle := <fopen> (filename, "w");
      <fputs> (string, handle);
      <fclose> handle
    )
