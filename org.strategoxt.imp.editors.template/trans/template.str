module template

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/Template
  lib/editor-common.generated
  analysis
  desugar
  generate-esv
  generate-sdf
  generate-str

rules // Main editor interface (defined by editor/Template-Builders and -References.esv)

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      ast'     := <analyze>;
      errors   := [];
      warnings := [];
      notes    := []

  generate(s|ext):
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|ext)> path;
      result   := <s> selected

  generate-aterm(s) = generate(s|"aterm")
  generate-esv(s) = generate(s|"esv")
  generate-sdf(s) = generate(s|"def")
  generate-str(s) = generate(s|"str")

  // Prints the abstract syntax ATerm of a selection.
  generate-aterm = generate-aterm(id)

  generate-esv = generate-esv(to-esv)

  generate-sdf = generate-sdf(to-sdf)

  generate-str = generate-str(to-str)

  generate-all:
    (selected, position, ast, path, project-path) -> None()
    with
      <debug> "Generating ESV...";
      esv := <to-esv> ast;
      esv-filename := $[[project-path]/[<guarantee-extension(|"esv")> path]];
      <write-string-to-file> (esv-filename, esv);
      <refresh-workspace-file> esv-filename
    with
      <debug> "Generating SDF...";
      sdf := <to-sdf> ast;
      sdf-filename := $[[project-path]/[<guarantee-extension(|"def")> path]];
      <write-string-to-file> (sdf-filename, sdf);
      <refresh-workspace-file> sdf-filename
    with
      <debug> "Generating STR...";
      str := <to-str> ast;
      str-filename := $[[project-path]/[<guarantee-extension(|"str")> path]];
      <write-string-to-file> (str-filename, str);
      <refresh-workspace-file> str-filename

  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
    with(
      ?(filename, string);
      handle := <fopen> (filename, "w");
      <fputs> (string, handle);
      <fclose> handle
    )
