module generate-str
imports
  libstratego-lib
  include/Template
  analysis
  desugar
  generation-utils

strategies

  to-str(|modulename):
    Module(_, _, _) ->
    $[module [modulename]
      imports
        libstratego-lib

      strategies

        pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
        pp-list(s|t) = map(s); separate-by(|t); concat-strings
        pp-list(s)   = map(s); concat-strings

      [section*]

      strategies // all other sorts used in placeholders

        [strategy*]]
    with
      // all imported modules
      module*  := <all-keys-IsImported; map(Module)>;
      section* := <map(to-str-module); separate-by(|"\n\n")>
    with
      // All sorts used in pp minus all sorts for which a pp strategy has been
      // created will get a `prettyprint-sort = is-string' default strategy.
      sorts-used-in-pp := <collect-om(sort-used-in-prettyprinting); nub> module*;
      sorts-decl-in-pp := <collect-om(sort-decl-in-prettyprinting); nub> module*;
      sorts-without-pp := <diff> (sorts-used-in-pp, sorts-decl-in-pp);
      strategy* := <map(sort-to-prettyprint-strategy); separate-by(|"\n\n")> sorts-without-pp

  to-str:
    Module(modulename, _, _) -> <to-str(|modulename)>

  to-str-module:
    m@ Module(modulename, _, _) ->
    $[strategies // [modulename]

        [strategy*]]
    with
      strategy* := <collect-om(template-to-prettyprint-strategy); separate-by(|"\n\n")>

strategies

  sort-to-prettyprint-strategy:
    sort -> $[prettyprint-[sort] = is-string]

  sort-decl-in-prettyprinting:
    TemplateProduction(sort, Template(_), _) -> sort

  sort-used-in-prettyprinting:
    Placeholder(_, Sort(sort), _, _) -> sort

  // Optimization for single-string-element templates
  template-to-prettyprint-strategy:
    TemplateProduction(sort, Template([String(t)]), attr*) ->
    $[prettyprint-[sort]:
        [cons]() -> [result]]
    with
      cons   := <collect-one(?sdf-cons(<un-double-quote>))> attr*;
      result := <escape-and-double-quote> t

  template-to-prettyprint-strategy:
    TemplateProduction(sort, Template(elem*), attr*) ->
    <trim-chars(' ' + '\t' + '\r' + '\n')> // Workaround Stratego/856
    $[prettyprint-[sort]:
        [cons]([arg*]) -> t
        with
          [let'*]]
    where
      not(!elem* => [String(_)])
    with
      cons    := <collect-one(?sdf-cons(<un-double-quote>))> attr*;
      elem'*  := <try-re-indent;
                  map(try(rename-template-element))> elem*;
      arg*    := <filter(template-element-to-cons-arg);
                  separate-by(|", ")> elem'*;
      part*   := <newlines-switch(trim-layout, trim-trailing-layout, trim-leading-layout);
                  listtd(template-element-to-stratego);
                  concatenate-consecutive-strings;
                  map(try(?String(<escape-and-double-quote>)));
                  separate-by(|", ")> elem'*;
      result  := <concat-strings>["t := <concat-strings> [", part*, "]"];
      let*    := <filter(template-element-to-assignment)> elem'*;
      let'*   := <separate-by(|";\n")> [let*, result]

  rename-template-element:
    Placeholder(_, Sort(x), _, _) -> <id>{<newname> x}

  template-element-to-cons-arg:
    Placeholder(_, _, _, _){name} -> name

  template-element-to-stratego =
       \[Newline(_), Indent(indent), Placeholder(_, _, _, _){name} | tail] ->
         [$[<string-replace(|"\n", "\n[indent]")> [name]'] | tail]\
    <+ [template-element-to-stratego' | id]
    <+ []

  template-element-to-stratego' =
      \Placeholder(_, _, _, _){name} -> $[[name]']\
    + \String(t) -> String(t)\
    + \Layout(t) -> String(t)\
    + \Indent(t) -> String(t)\
    + \Newline(t) -> String(t)\

  template-element-to-assignment:
    Placeholder(_, Sort(x), None(), _){name} -> $[[name]' := <prettyprint-[x]> [name]]

  template-element-to-assignment:
    Placeholder(_, Sort(x), <Star() + Plus()>, Options(opt*)){name} -> t
    with
      if sep := <collect-one(?Separator(<id>))> opt* then
        t := $[[name]' := <pp-list(prettyprint-[x]|"[<escape> sep]")> [name]]
      else
        t := $[[name]' := <pp-list(prettyprint-[x])> [name]]
      end

  template-element-to-assignment:
    Placeholder(_, Sort(x), Option(), _){name} -> $[[name]' := <pp-option(prettyprint-[x])> [name]]
