module TemplateLang
imports sdf2-core/SDF constants/StrCon sorts/Sorts symbols/Symbols labels/Labels
        constants/IdentifierCon kernel/Kernel restrictions/Restrictions
        priority/Priority basic/Basic modules/Modules
        layout-constraints/Layout-Constraints

exports
  context-free start-symbols
    Module

  context-free syntax
    CONTENTCOMPLETE -> TemplateProduction {cons("WATER"), recover}
    CONTENTCOMPLETE -> PlaceholderOption  {cons("WATER"), recover}
    CONTENTCOMPLETE -> PlaceholderOptions {cons("WATER"), recover}

  context-free syntax
    "[[TemplateProduction]]" -> TemplateProduction {cons("TemplateProduction-Plhdr")}
    "[[PlaceholderOption]]"  -> PlaceholderOption  {cons("PlaceholderOption-Plhdr")}
    "[[PlaceholderOptions]]" -> PlaceholderOptions {cons("PlaceholderOptions-Plhdr")}
    "[[CONTENTCOMPLETE]]"    -> CONTENTCOMPLETE    {cons("CONTENTCOMPLETE-Plhdr")}

  context-free syntax
    "template" "options" TemplateOption* -> Section            {cons("TemplateOptions")}
    "newlines" ":" NewlineOptionValue    -> TemplateOption     {cons("Newlines")}
    "no-completions"                     -> TemplateOption     {cons("NoCompletions")}
    "none"                               -> NewlineOptionValue {cons("None")}
    "leading"                            -> NewlineOptionValue {cons("Leading")}
    "trailing"                           -> NewlineOptionValue {cons("Trailing")}
    "separating"                         -> NewlineOptionValue {cons("Separating")}
    "keyword" "-/-" Lookaheads           -> TemplateOption     {cons("KeywordFollowRestriction")}
    "tokenize" ":" StrCon                -> TemplateOption     {cons("Tokenize")}

  context-free syntax
    "[[Section]]"            -> Section            {cons("Section-Plhdr")}
    "[[NewlineOptionValue]]" -> NewlineOptionValue {cons("NewlineOptionValue-Plhdr")}
    "[[Lookaheads]]"         -> Lookaheads         {cons("Lookaheads-Plhdr")}
    "[[TemplateOption]]"     -> TemplateOption     {cons("TemplateOption-Plhdr")}
    "[[StrCon]]"             -> StrCon             {cons("StrCon-Plhdr")}

  context-free syntax
    SortConsRef                            -> Group       {cons("SimpleRefGroup")}
    "{" SortConsRef+ "}"                   -> Group       {cons("ProdsRefGroup")}
    "{" Associativity ":" SortConsRef+ "}" -> Group       {cons("AssocRefGroup")}
    Symbol "." Constructor                 -> SortConsRef {cons("SortConsRef")}

  context-free syntax
    "[[Group]]"         -> Group         {cons("Group-Plhdr")}
    "[[Associativity]]" -> Associativity {cons("Associativity-Plhdr")}
    "[[SortConsRef]]"   -> SortConsRef   {cons("SortConsRef-Plhdr")}
    "[[Symbol]]"        -> Symbol        {cons("Symbol-Plhdr")}
    "[[Constructor]]"   -> Constructor   {cons("Constructor-Plhdr")}

  context-free syntax
    "templates" TemplateProduction*            -> Section            {cons("TemplateSection"), deprecated("Use context-free syntax section instead")}
    "lexical" "syntax" SdfProduction*          -> Grammar            {cons("LexicalSyntax"), prefer}
    "context-free" "syntax" GeneralProduction* -> Grammar            {cons("ContextFreeSyntax"), prefer}
    "syntax" SdfProduction*                    -> Grammar            {cons("Kernel"), prefer}
    SdfProduction                              -> GeneralProduction  
    TemplateProduction                         -> GeneralProduction  {prefer}
    SymbolDef "=" RHS Attributes               -> SdfProduction      {cons("SdfProduction")}
    SortCons "=" RHS Attributes                -> SdfProduction      {cons("SdfProductionWithCons")}
    Symbols                                    -> RHS                {cons("Rhs")}
    SymbolDef "=" Template Attributes          -> TemplateProduction {cons("TemplateProduction")}
    SortCons "=" Template Attributes           -> TemplateProduction {cons("TemplateProductionWithCons")}
    IdCon                                      -> Constructor        {cons("Constructor")}
    SymbolDef "." Constructor                  -> SortCons           {cons("SortCons")}
    "<" Placeholder ">"                        -> TemplatePart1      {cons("Angled")}
    "[" Placeholder "]"                        -> TemplatePart2      {cons("Squared")}
    Symbol PlaceholderOptions                  -> Placeholder        {cons("Placeholder")}
                                               -> PlaceholderOptions {cons("NoOptions")}
    ";" {PlaceholderOption ","}+               -> PlaceholderOptions {cons("Options")}
    "hide"                                     -> PlaceholderOption  {cons("Hide")}
    "wrap"                                     -> PlaceholderOption  {cons("Wrap")}
    "anchor"                                   -> PlaceholderOption  {cons("Anchor")}
    "separator" "=" StrCon                     -> PlaceholderOption  {cons("Separator"), deprecated("Use list with separator symbol instead: {S* \"separator\"}")}
    "text" "=" StrCon                          -> PlaceholderOption  {cons("Text")}

  context-free syntax
    "[[Section]]"            -> Section            {cons("Section-Plhdr")}
    "[[Grammar]]"            -> Grammar            {cons("Grammar-Plhdr")}
    "[[GeneralProduction]]"  -> GeneralProduction  {cons("GeneralProduction-Plhdr")}
    "[[SdfProduction]]"      -> SdfProduction      {cons("SdfProduction-Plhdr")}
    "[[RHS]]"                -> RHS                {cons("RHS-Plhdr")}
    "[[Symbols]]"            -> Symbols            {cons("Symbols-Plhdr")}
    "[[TemplateProduction]]" -> TemplateProduction {cons("TemplateProduction-Plhdr")}
    "[[Template]]"           -> Template           {cons("Template-Plhdr")}
    "[[Attributes]]"         -> Attributes         {cons("Attributes-Plhdr")}
    "[[IdCon]]"              -> IdCon              {cons("IdCon-Plhdr")}
    "[[SortCons]]"           -> SortCons           {cons("SortCons-Plhdr")}
    "[[SymbolDef]]"          -> SymbolDef          {cons("SymbolDef-Plhdr")}
    "[[Constructor]]"        -> Constructor        {cons("Constructor-Plhdr")}
    "[[TemplatePart1]]"      -> TemplatePart1      {cons("TemplatePart1-Plhdr")}
    "[[TemplatePart2]]"      -> TemplatePart2      {cons("TemplatePart2-Plhdr")}
    "[[Placeholder]]"        -> Placeholder        {cons("Placeholder-Plhdr")}
    "[[Symbol]]"             -> Symbol             {cons("Symbol-Plhdr")}
    "[[PlaceholderOptions]]" -> PlaceholderOptions {cons("PlaceholderOptions-Plhdr")}
    "[[PlaceholderOption]]"  -> PlaceholderOption  {cons("PlaceholderOption-Plhdr")}
    "[[StrCon]]"             -> StrCon             {cons("StrCon-Plhdr")}

  syntax
    "<" {<TemplateLine1-CF> "\n"}+ ">"   -> <Template-CF>      {cons("Template")}
    "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF>      {cons("TemplateDeprecated"), avoid, deprecated("Use single brackets to delimit the template")}
    <TemplatePart1-CF>*                  -> <TemplateLine1-CF> {cons("Line")}
    <TemplateString1-LEX>                -> <TemplatePart1-CF> {cons("String")}
    <TemplateEscape1-LEX>                -> <TemplatePart1-CF> {cons("Escape")}
    <TemplateLayout-LEX>                 -> <TemplatePart1-CF> {cons("Layout")}
    "[" {<TemplateLine2-CF> "\n"}+ "]"   -> <Template-CF>      {cons("TemplateSquare")}
    "[[" {<TemplateLine2-CF> "\n"}+ "]]" -> <Template-CF>      {cons("TemplateSquareDeprecated"), avoid, deprecated("Use single brackets to delimit the template")}
    <TemplatePart2-CF>*                  -> <TemplateLine2-CF> {cons("Line")}
    <TemplateString2-LEX>                -> <TemplatePart2-CF> {cons("String")}
    <TemplateEscape2-LEX>                -> <TemplatePart2-CF> {cons("Escape")}
    <TemplateLayout-LEX>                 -> <TemplatePart2-CF> {cons("Layout")}

  lexical syntax
    LF    -> EOL  
    CR    -> EOL  
    CR LF -> EOL  
    [\r]  -> CR   
    [\n]  -> LF   
    EOL   -> "\n" 

  lexical restrictions
    EOL -/- [\n]

  lexical syntax
    [\ \t]+             -> TemplateLayout     
    TemplateString1Alt+ -> TemplateString1    
    TemplateString2Alt+ -> TemplateString2    
    ~[\\\"\ \t]+        -> TemplateStringQ    
    ~[\\\<\>\ \t\r\n]   -> TemplateString1Alt 
    ~[\\\[\]\ \t\r\n]   -> TemplateString2Alt 
    Backslash           -> TemplateString2Alt 
    [\\]                -> Backslash          

  lexical restrictions
    TemplateLayout -/- [\ \t]
    TemplateString1 -/- ~[\\\<\>\ \t\r\n]
    TemplateString2 -/- ~[\\\[\]\ \t\r\n]
    TemplateStringQ -/- ~[\\\"\ \t]
    TemplateString1 -/- [\\] . ~[\<\>\\]
    TemplateString2 -/- [\\] . ~[\[\]\\]
    Backslash -/- [\<\>\\]

  lexical syntax
    [a-zA-Z]* "CONTENTCOMPLETE" [0-9]+ -> CONTENTCOMPLETE       {avoid}
    EscapedChar1+                      -> TemplateEscape1       
    EscapedChar2+                      -> TemplateEscape2       
    "\\<"                              -> EscapedChar1          
    "\\>"                              -> EscapedChar1          
    "\\\\"                             -> EscapedChar1          
    "\\["                              -> EscapedChar2          
    "\\]"                              -> EscapedChar2          
    "\\\\"                             -> EscapedChar2          
    "<" EscapedChar1Alt+ ">"           -> EscapedChar1          
    EscapedBackslashChar1              -> EscapedChar1Alt       
    EscapedChar                        -> EscapedChar1Alt       
    "<\\\\>" [\ \t\r]* [\n]            -> EscapedChar1          
    "[" EscapedChar2Alt+ "]"           -> EscapedChar2          
    EscapedBackslashChar2              -> EscapedChar2Alt       
    EscapedChar                        -> EscapedChar2Alt       
    "[\\\\]" [\ \t\r]* [\n]            -> EscapedChar2          
    "\\\\"                             -> EscapedBackslashChar1 
    "\\\\"                             -> EscapedBackslashChar2 
    TemplateEscapeQAlt+                -> TemplateEscapeQ       
    EscapedChar                        -> TemplateEscapeQAlt    
    "\\\\"                             -> TemplateEscapeQAlt    
    "\\'"                              -> EscapedChar           
    '\\"'                              -> EscapedChar           
    "\\ "                              -> EscapedChar           
    "\\t"                              -> EscapedChar           
    "\\r"                              -> EscapedChar           
    "\\n"                              -> EscapedChar           
    "\\u" [0-9A-Fa-f]+                 -> EscapedUnicodeChar    
    EscapedUnicodeChar                 -> EscapedChar           
    "\\" ~[]                           -> EscapedChar           {cons("WATER"), recover}
    "<" ~[\>]+ ">"                     -> EscapedChar1          {cons("WATER"), recover}
    "[" ~[\]]+ "]"                     -> EscapedChar2          {cons("WATER"), recover}

  lexical restrictions
    TemplateEscape1 -/- [\\]
    TemplateEscape1 -/- [\<] . [\\\>]
    TemplateEscape2 -/- [\\]
    TemplateEscape2 -/- [\[] . [\\\]]
    TemplateEscapeQ -/- [\\]
    EscapedBackslashChar1 -/- [\>]
    EscapedBackslashChar2 -/- [\]]
    EscapedUnicodeChar -/- [0-9A-Fa-f]